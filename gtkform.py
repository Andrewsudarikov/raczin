import random
TaskNum = random.randint(1,999)

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio

class HeaderBarWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="HeaderBar Demo", modal='true')
        self.set_default_size(500,400)
        self.set_border_width(5)
        self.set_resizable(False)
        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = "Raczin"
        self.set_titlebar(hb)
        outerbox = Gtk.Box(spacing=2, orientation=Gtk.Orientation.VERTICAL)
        self.add(outerbox)
        TaskNumber = Gtk.Label()
        TaskNumber.set_text('<big>No. </big>' + str(TaskNum))
        TaskNumber.set_use_markup(True)
        TaskBody = Gtk.Label("Here will be the main task label.")
        TaskBody.set_line_wrap(True)
        TaskBody.set_use_markup(True)
        QuestionBody = Gtk.Label ("<i>Here will be the question label</i>")
        QuestionBody.set_use_markup(True)
        AnswerEntry = Gtk.Entry()
        AnswerEntry.set_size_request(-1, 30)
        AnswerEntry.set_placeholder_text("Type your answer here")
        AnswerMatrix = Gtk.Box(spacing=2, orientation=Gtk.Orientation.HORIZONTAL)
        btnAnswer1 = Gtk.Button(label = "Answer No. 1")
        btnAnswer1.set_size_request(90, 30)
        btnAnswer2 = Gtk.Button(label = "Answer No. 2")
        btnAnswer2.set_size_request(90, 30)
        btnAnswer3 = Gtk.Button(label = "Answer No. 3")
        btnAnswer4 = Gtk.Button(label = "Answer No. 4")
        outerbox.pack_start(TaskNumber, False, True, 10)
        TaskBody.set_justify(Gtk.Justification.LEFT)
        outerbox.pack_start(TaskBody, False, False, 0)
        outerbox.pack_start(QuestionBody, True, True, 0)
        outerbox.pack_end(AnswerMatrix, False, True, 0)
        AnswerMatrix.pack_start(btnAnswer1, True, True, 0)
        AnswerMatrix.pack_start(btnAnswer2, True, True, 0)
        AnswerMatrix.pack_start(btnAnswer3, True, True, 0)
        AnswerMatrix.pack_start(btnAnswer4, True, True, 0)
        outerbox.pack_end(AnswerEntry, False, True, 0)
        grid = Gtk.Grid()
        self.add(grid)
        btnSettings = Gtk.Button()
        icon = Gio.ThemedIcon(name="open-menu-symbolic")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        btnSettings.add(image)
        btnSettings.set_size_request(30, -1)
        hb.pack_end(btnSettings)
        box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        Gtk.StyleContext.add_class(box.get_style_context(), "linked")
        btnPrev = Gtk.Button()
        icon = Gio.ThemedIcon(name="go-previous-symbolic")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        btnPrev.add(image)
        btnPrev.set_size_request(40, -1)
        box.add(btnPrev)
        btnPop = Gtk.Button()
        icon = Gio.ThemedIcon(name="input-dialpad-symbolic")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        btnPop.add(image)
        btnPop.set_size_request(30, -1)
        box.add(btnPop)
        btnPop.connect("clicked",self.on_numpad_activate)
        outerbox.pack_start(btnPop, False, True, 0)
        self.popover = Gtk.Popover()
        btn1 = Gtk.Button(label = "1")
        btn1.set_size_request(34, 34)
        btn1.connect("clicked",self.btn1_activate)
        btn2 = Gtk.Button(label = "2")
        btn2.set_size_request(34, 34)
        btn3 = Gtk.Button(label = "3")
        btn3.set_size_request(34, 34)
        btn4 = Gtk.Button(label = "4")
        btn4.set_size_request(34, 34)
        btn5 = Gtk.Button(label = "5")
        btn5.set_size_request(34, 34)
        btn6 = Gtk.Button(label = "6")
        btn6.set_size_request(34, 34)
        btn7 = Gtk.Button(label = "7")
        btn7.set_size_request(34, 34)
        btn8 = Gtk.Button(label = "8")
        btn8.set_size_request(34, 34)
        btn9 = Gtk.Button(label = "9")
        btn9.set_size_request(34, 34)
        btnZero = Gtk.Button(label="0")
        btnZero.set_size_request(34, 34)
        btnBackspace = Gtk.Button()
        icon = Gio.ThemedIcon(name="edit-clear-symbolic")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        btnBackspace.add(image)
        btnBackspace.set_size_request(34, 34)
        grid.add (btn1)
        grid.add (btn2)
        grid.add (btn3)
        grid.attach_next_to(btn4, btn1, Gtk.PositionType.BOTTOM, 1, 2)
        grid.attach_next_to(btn5, btn4, Gtk.PositionType.RIGHT, 1, 2)
        grid.attach_next_to(btn6, btn5, Gtk.PositionType.RIGHT, 1, 2)
        grid.attach_next_to(btn7, btn4, Gtk.PositionType.BOTTOM, 1, 2)
        grid.attach_next_to(btn8, btn7, Gtk.PositionType.RIGHT, 1, 2)
        grid.attach_next_to(btn9, btn8, Gtk.PositionType.RIGHT, 1, 2)
        grid.attach_next_to(btnZero, btn8, Gtk.PositionType.BOTTOM, 1, 2)
        grid.attach_next_to(btnBackspace, btnZero, Gtk.PositionType.RIGHT, 1, 2)
        self.popover.add(grid)
        self.popover.set_position(Gtk.PositionType.BOTTOM)
        self.popover.set_size_request(20,40)
        self.popover.set_border_width(5)
        btnNext = Gtk.Button()
        icon = Gio.ThemedIcon(name="go-next-symbolic")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        btnNext.add(image)
        btnNext.set_size_request(40, -1)
        box.add(btnNext)
        hb.pack_start(box)
        btnRand = Gtk.Button()
        icon = Gio.ThemedIcon(name="mail-send-receive-symbolic")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        btnRand.add(image)
        btnRand.set_size_request(20, -1)
        btnRand.connect ("clicked", self.btnRand_activate)
        hb.pack_start(btnRand)
        
    def on_numpad_activate(self,btnPop):
        self.popover.set_relative_to(btnPop)
        self.popover.show_all()
        self.popover.popup()
        
    def on_open_clicked(self,btnPop):
        self.popover.hide()
        self.popover.popdown()
    
    def btnRand_activate(self,btnRand):
        TaskNum = random.randint(1,999)
        TaskNumber.set_text(self,'<big>No. </big>' + str(TaskNum))
        
    def btn1_activate(self,btn1):
        self.AnswerEntry.set_text("1")

win = HeaderBarWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
